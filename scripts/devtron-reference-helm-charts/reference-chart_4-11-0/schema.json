
{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
      "ContainerPort": {
        "type": "array",
        "description": "defines ports on which application services will be exposed to other services",
        "title": "Container Port",
        "items": {
          "type": "object",
          "properties": {
            "envoyPort": {
              "type": "integer",
              "description": "envoy port for the container",
              "title": "Envoy Port"
            },
            "idleTimeout": {
              "type": "string",
              "description": "duration of time for which a connection is idle before the connection is terminated",
              "title": "Idle Timeout"
            },
            "name": {
              "type": "string",
              "description": "name of the port",
              "title": "Name"
            },
            "port": {
              "type": "integer",
              "description": "Port",
              "title": "port for the container"
            },
            "servicePort": {
              "type": "integer",
              "description": "port of the corresponding kubernetes service",
              "title": "Service Port"
            },
            "supportStreaming": {
              "type": "boolean",
              "description": "field to enable/disable timeout for high performance protocols like grpc",
              "title": "Support Streaming"
            },
            "useHTTP2": {
              "type": "boolean",
              "description": " field for setting if envoy container can accept(or not) HTTP2 requests",
              "title": "Use HTTP2"
            }
          }
        }
      },
      "EnvVariables": {
        "type": "array",
        "items": {},
        "description": "contains environment variables needed by the containers",
        "title": "Environment Variables"
      },
      "GracePeriod": {
        "type": "integer",
        "description": "time for which Kubernetes waits before terminating the pods",
        "title": "Grace Period"
      },
      "LivenessProbe": {
        "type": "object",
        "description": "used by the kubelet to know when to restart a container",
        "title": "Liveness Probe",
        "properties": {
          "Path": {
            "type": "string",
            "description": "defines the path where the liveness needs to be checked",
            "title": "Path"
          },
          "command": {
            "type": "array",
            "items": {},
            "description": "commands executed to perform a probe",
            "title": "Command"
          },
          "failureThreshold": {
            "type": "integer",
            "description": "defines the maximum number of failures that are acceptable before a given container is not considered as live",
            "title": "Failure Threshold"
          },
          "httpHeaders": {
            "type": "array",
            "items": {},
            "description": "used to override the default headers by defining .httpHeaders for the probe",
            "title": "HTTP headers"
          },
          "initialDelaySeconds": {
            "type": "integer",
            "description": "defines the time to wait before a given container is checked for liveness",
            "title": "Initial Delay Seconds"
          },
          "periodSeconds": {
            "type": "integer",
            "description": "defines the time to check a given container for liveness",
            "title": "Period Seconds"
          },
          "port": {
            "type": "integer",
            "description": "port to access on the container",
            "title": "Port"
          },
          "scheme": {
            "type": "string",
            "description": "Scheme to use for connecting to the host (HTTP or HTTPS). Defaults to HTTP.",
            "title": "Scheme"
          },
          "successThreshold": {
            "type": "integer",
            "description": "defines the number of successes required before a given container is said to fulfil the liveness probe",
            "title": "Success Threshold"
          },
          "tcp": {
            "type": "boolean",
            "description": "If enabled, the kubelet will attempt to open a socket to container. If connection is established, the container is considered healthy",
            "title": "TCP"
          },
          "timeoutSeconds": {
            "type": "integer",
            "description": "defines the time for checking timeout",
            "title": "Timeout Seconds"
          }
        }
      },
      "MaxSurge": {
        "type": "integer",
        "description": "maximum number of pods that can be created over the desired number of pods",
        "title": "Maximum Surge"
      },
      "MaxUnavailable": {
        "type": "integer",
        "description": "maximum number of pods that can be unavailable during the update process",
        "title": "Maximum Unavailable"
      },
      "MinReadySeconds": {
        "type": "integer",
        "description": "minimum number of seconds for which a newly created Pod should be ready without any of its containers crashing, for it to be considered available",
        "title": "Minimum Ready Seconds"
      },
      "ReadinessProbe": {
        "type": "object",
        "description": "kubelet uses readiness probes to know when a container is ready to start accepting traffic",
        "title": "Readiness Probe",
        "properties": {
          "Path": {
            "type": "string",
            "description": "defines the path where the readiness needs to be checked",
            "title": "Path"
          },
          "command": {
            "type": "array",
            "items": {},
            "description": "commands executed to perform a probe",
            "title": "Command"
          },
          "failureThreshold": {
            "type": "integer",
            "description": "defines the maximum number of failures that are acceptable before a given container is not considered as ready",
            "title": "Failure Threshold"
          },
          "httpHeader": {
            "type": "array",
            "items": {},
            "description": "used to override the default headers by defining .httpHeaders for the probe",
            "title": "HTTP headers"
          },
          "initialDelaySeconds": {
            "type": "integer",
            "description": "defines the time to wait before a given container is checked for readiness",
            "title": "Initial Delay Seconds"
          },
          "periodSeconds": {
            "type": "integer",
            "description": "defines the time to check a given container for readiness",
            "title": "Period Seconds"
          },
          "port": {
            "type": "integer",
            "description": "port to access on the container",
            "title": "Port"
          },
          "scheme": {
            "type": "string",
            "description": "Scheme to use for connecting to the host (HTTP or HTTPS). Defaults to HTTP.",
            "title": "Scheme"
          },
          "successThreshold": {
            "type": "integer",
            "description": "defines the number of successes required before a given container is said to fulfil the readiness probe",
            "title": "Success Threshold"
          },
          "tcp": {
            "type": "boolean",
            "description": "If enabled, the kubelet will attempt to open a socket to container. If connection is established, the container is considered healthy",
            "title": "TCP"
          },
          "timeoutSeconds": {
            "type": "integer",
            "description": "defines the time for checking timeout",
            "title": "Timeout Seconds"
          }
        }
      },
      "Spec": {
        "type": "object",
        "description": "used to define the desire state of the given container",
        "title": "Spec",
        "properties": {
          "Affinity": {
            "type": "object",
            "description": "Node/Inter-pod Affinity allows you to constrain which nodes your pod is eligible to schedule on, based on labels of the node/pods",
            "title": "Affinity",
            "properties": {
              "Key": {
                "type": "string",
                "description": "Key part of the label for node/pod selection",
                "title": "Key"
              },
              "Values": {
                "type": "string",
                "description": "Value part of the label for node/pod selection",
                "title": "Values"
              },
              "key": {
                "type": "string"
              }
            }
          }
        }
      },
      "args": {
        "type": "object",
        "description": " used to give arguments to command",
        "title": "Arguments",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "used for enabling/disabling aruguments",
            "title": "Enabled"
          },
          "value": {
            "type": "array",
            "description": "values of the arguments",
            "title": "Value",
            "items": [
              {
                "type": "string"
              },
              {
                "type": "string"
              },
              {
                "type": "string"
              }
            ]
          }
        }
      },
      "autoscaling": {
        "type": "object",
        "description": "connected to HPA and controls scaling up and down in response to request load",
        "title": "Autoscaling",
        "properties": {
          "MaxReplicas": {
            "type": "integer",
            "description": "Maximum number of replicas allowed for scaling",
            "title": "Maximum Replicas"
          },
          "MinReplicas": {
            "type": "integer",
            "description": "Minimum number of replicas allowed for scaling",
            "title": "Minimum Replicas"
          },
          "TargetCPUUtilizationPercentage": {
            "type": "integer",
            "description": "The target CPU utilization that is expected for a container",
            "title": "TargetCPUUtilizationPercentage"
          },
          "TargetMemoryUtilizationPercentage": {
            "type": "integer",
            "description": "The target memory utilization that is expected for a container",
            "title": "TargetMemoryUtilizationPercentage"
          },
          "behavior": {
            "type": "object",
            "description": "describes behavior and scaling policies for that behavior",
            "title": "Behavior",
            "enum": ["scaleUp","scaleDown"]
          },
          "enabled": {
            "type": "boolean",
            "description": "used for enabling/disabling autoscaling",
            "title": "Enabled"
          },
          "extraMetrics": {
            "type": "array",
            "items": {},
            "description": "used to give external metrics for autoscaling",
            "title": "Extra Metrics"
          }
        }
      },
      "command": {
        "type": "object",
        "description": "contains the commands for the server",
        "title": "Command",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "used for enabling/disabling commands"
          },
          "value": {
            "type": "array",
            "items": {},
            "description": "contains the commands",
            "title": "Value"
          }
        }
      },
      "containerSecurityContext": {
        "type": "object",
        "description": " defines privilege and access control settings for a Container",
        "title": "Container Security Context"
      },
      "containers": {
        "type": "array",
        "items": {},
        "description": " used to run side-car containers along with the main container within same pod"
      },
      "dbMigrationConfig": {
        "type": "object",
        "description": "used to configure database migration",
        "title": "Db Migration Config",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "used for enabling/disabling the config",
            "title": "Enabled"
          }
        }
      },
      "envoyproxy": {
        "type": "object",
        "properties": {
          "configMapName": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "resources": {
            "type": "object",
            "properties": {
              "limits": {
                "type": "object",
                "properties": {
                  "cpu": {
                    "type": "string",
                    "format": "cpu"
                  },
                  "memory": {
                    "type": "string",
                    "format": "memory"
                  }
                }
              },
              "requests": {
                "type": "object",
                "properties": {
                  "cpu": {
                    "type": "string",
                    "format": "cpu"
                  },
                  "memory": {
                    "type": "string",
                    "format": "memory"
                  }
                }
              }
            }
          }
        }
      },
      "image": {
        "type": "object",
        "properties": {
          "pullPolicy": {
            "type": "string"
          }
        }
      },
      "imagePullSecrets": {
        "type": "array",
        "items": {}
      },
      "ingress": {
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object"
          },
          "className": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "hosts": {
            "type": "array",
            "items": [
              {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string"
                  },
                  "pathType": {
                    "type": "string"
                  },
                  "paths": {
                    "type": "array",
                    "items": [
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string"
                  },
                  "pathType": {
                    "type": "string"
                  },
                  "paths": {
                    "type": "array",
                    "items": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "tls": {
            "type": "array",
            "items": {}
          }
        }
      },
      "ingressInternal": {
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object"
          },
          "className": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "hosts": {
            "type": "array",
            "items": [
              {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string"
                  },
                  "pathType": {
                    "type": "string"
                  },
                  "paths": {
                    "type": "array",
                    "items": [
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string"
                  },
                  "pathType": {
                    "type": "string"
                  },
                  "paths": {
                    "type": "array",
                    "items": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "tls": {
            "type": "array",
            "items": {}
          }
        }
      },
      "initContainers": {
        "type": "array",
        "items": {}
      },
      "KedaAutoscaling": {
        "type": "object",
        "properties": {
          "advanced": {
            "type": "object"
          },
          "authenticationRef": {
            "type": "object"
          },
          "enabled": {
            "type": "boolean"
          },
          "envSourceContainerName": {
            "type": "string"
          },
          "maxReplicaCount": {
            "type": "integer"
          },
          "minReplicaCount": {
            "type": "integer"
          },
          "triggerAuthentication": {
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "name": {
                "type": "string"
              },
              "spec": {
                "type": "object"
              }
            }
          },
          "triggers": {
            "type": "array",
            "items": {}
          }
        }
      },
      "pauseForSecondsBeforeSwitchActive": {
        "type": "integer"
      },
      "podAnnotations": {
        "type":"object"
      },
      "podLabels": {
        "type":"object"
      },
      "podSecurityContext": {
        "type":"object"
      },
      "prometheus": {
        "type": "object",
        "properties": {
          "release": {
            "type": "string"
          }
        }
      },
      "rawYaml": {
        "type": "array",
        "items": {}
      },
      "replicaCount": {
        "type": "integer"
      },
      "resources": {
        "type": "object",
        "properties": {
          "limits": {
            "type": "object",
            "properties": {
              "cpu": {
                "type": "string",
                "format": "cpu"
              },
              "memory": {
                "type": "string",
                "format": "memory"
              }
            }
          },
          "requests": {
            "type": "object",
            "properties": {
              "cpu": {
                "type": "string",
                "format": "cpu"
              },
              "memory": {
                "type": "string",
                "format": "memory"
              }
            }
          }
        }
      },
      "secret": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object"
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "server": {
        "type": "object",
        "properties": {
          "deployment": {
            "type": "object",
            "properties": {
              "image": {
                "type": "string"
              },
              "image_tag": {
                "type": "string"
              }
            }
          }
        }
      },
      "service": {
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object"
          },
          "type": {
            "type": "string",
            "enum": [
              "ClusterIP",
              "LoadBalancer",
              "NodePort",
              "ExternalName"
            ]
          }
        }
      },
      "servicemonitor": {
        "type": "object",
        "properties": {
          "additionalLabels": {
            "type": "object"
          }
        }
      },
      "tolerations": {
        "type": "array",
        "items": {}
      },
      "topologySpreadConstraints": {
        "type": "array",
        "items": {}
      },
      "volumeMounts": {
        "type": "array",
        "items": {}
      },
      "volumes": {
        "type": "array",
        "items": {}
      },
      "waitForSecondsBeforeScalingDown": {
        "type": "integer"
      }
    }
  }